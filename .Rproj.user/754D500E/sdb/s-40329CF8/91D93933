{
    "collab_server" : "",
    "contents" : "# Hello, world!\n#\n# This is an example function named 'hello'\n# which prints 'Hello, world!'.\n#\n# You can learn more about package authoring with RStudio at:\n#\n#   http://r-pkgs.had.co.nz/\n#\n# Some useful keyboard shortcuts for package authoring:\n#\n#   Build and Reload Package:  'Cmd + Shift + B'\n#   Check Package:             'Cmd + Shift + E'\n#   Test Package:              'Cmd + Shift + T'\n#\n#fname <- \"20170801-20170801.csv\"\n#.run <- NeoRun_data(fname)\n#\n#.run$Lap\n#.run$base\n#.run$Graph\n\nNeoRun_data <- function(fname){\n  library(tidyverse)\n  library(readr)\n  library(stringr)\n\n  ## Read CSV data from Backup\n  .d <- read_lines(fname,locale=locale(encoding=\"CP932\"))\n  for(i in 1:length(.d)){\n    if(.d[i] == \"[TrainingResult]\") p.TrainingResult = i\n    if(.d[i] == \"[TrainingData]\") p.TrainingData = i\n    if(.d[i] == \"[GraphData]\") p.GraphData = i\n    if(.d[i] == \"[GPSData]\") p.GPSData = i\n    if(.d[i] == \"[LapData]\") p.LapData = i\n    if(.d[i] == \"[TrainingSettingData]\") p.TrainingSettingData = i\n    if(.d[i] == \"[[end]]\") p.end = i\n  }\n  ## Read basic Info\n  .d.TrainingName <- read_csv(fname,locale=locale(encoding=\"CP932\"),\n                              skip=2,n_max = 1,col_names = FALSE)\n  .d.TrainingName\n  .d.TrainingInfo <- read_csv(fname,locale=locale(encoding=\"CP932\"),\n                              skip=5,n_max = 1,col_names = TRUE)\n  .d.TrainingInfo\n  .d.TrainingInfo %>% select(StartDay,StartTime,EndDay,EndTime) -> .d.Date\n  # get Graph Data\n  .d.Graph.Interval <- read_csv(fname,locale=locale(encoding=\"CP932\"),\n                                skip=p.GraphData,n_max = 2)\n  .d.Graph.0 <- read_csv(fname,locale=locale(encoding=\"CP932\"),\n                         skip=p.GraphData + 2 , n_max = p.GPSData - p.GraphData -3,\n                         col_names = FALSE)\n\n  .d.Graph.0[,1] %>% unlist() -> cnames\n  .d.Graph.0[,-1] %>% t() -> .d.Graph\n  colnames(.d.Graph) <- cnames\n  rownames(.d.Graph) <- 1:nrow(.d.Graph)\n  .d.Graph.Interval\n  .d.Graph %>% tbl_df() -> .d.Graph.td ###%>% mutate(.d.Date[1,1])\n\n  ## Get LAP data\n  begin <- p.LapData + 1\n  end <- p.TrainingSettingData-1\n  .d[begin:end] %>% read.csv(text=.) -> .d.lap # AdvR p24\n\n  ## Get GPS String\n  # [GPSData]     GPSstring[]\n  # Gpstime       2\n  # GpsLatitude   3\n  # GpsLongitude  4\n  # GpsAltitude   5\n  # GpsDirection  6\n  # GpsSpeed      7\n  # GpsStatus     8\n  # [LapData]\n\n  start <- p.GPSData +1\n  end <- p.LapData -1\n  cmd <- NULL\n  for(i in start:end) cmd <- paste0(cmd,\".d[\",i,\"],\")\n  cmd\n  Gpsall <- eval(parse(text=paste0(\"paste0(\",cmd,\"NULL)\")))\n  Gpsall %>% str_split(\"Gps\") -> GPSstring\n\n  ## GPS Time\n  GPSstring[[1]][2] %>% stringr::str_split(\",\") -> Gpstime.0\n  stringr::str_split(Gpstime.0[[1]][2],\";\") -> Gpstime.1\n  Gpstime.1 %>% unlist()  -> Gtime\n  #parse_time(\"00:00:0\") # HM は二桁必要 sprintf で桁を合わせる。\n  for(i in 1:length(Gtime)){\n    Gtime[i] %>% str_split(pattern = \":\") %>% unlist() %>% as.numeric() -> .t\n    sprintf(\"%02s:%02s:%02s\",.t[1],.t[2],.t[3]) -> Gtime[i]\n  }\n  Gtime %>% parse_time() -> GPSTime\n\n  ## GpsLatitude   3\n  GPSstring[[1]][3] %>% str_split(\",\") -> Gps_tmp\n  str_split(Gps_tmp[[1]][2],\";\") %>% unlist() %>% as.numeric() -> GPSlatitude\n\n  ## GpsLongitude  4\n  GPSstring[[1]][4] %>% str_split(\",\") -> Gps_tmp\n  str_split(Gps_tmp[[1]][2],\";\") %>% unlist() %>% as.numeric() -> GPSLongitude\n\n  # GpsAltitude   5\n  GPSstring[[1]][5] %>% str_split(\",\") -> Gps_tmp\n  str_split(Gps_tmp[[1]][2],\";\") %>% unlist() %>% as.numeric() -> GPSAltitude\n\n  # GpsDirection  6\n  GPSstring[[1]][6] %>% str_split(\",\") -> Gps_tmp\n  str_split(Gps_tmp[[1]][2],\";\") %>% unlist() %>% as.numeric() -> GPSDirection\n\n  ## GPSSpeed / 7\n  GPSstring[[1]][7] %>% str_split(\",\") -> Gps_tmp\n  str_split(Gps_tmp[[1]][2],\";\") %>% unlist() %>% as.numeric() -> GPSSpeed\n\n\n  # GpsStatus     8\n  GPSstring[[1]][8] %>% str_split(\",\") -> Gps_tmp\n  str_split(Gps_tmp[[1]][2],\";\") %>% unlist() %>% as.numeric() -> GPSStatus\n\n  GPS <- data.frame(GPSTime,GPSlatitude,GPSLongitude,GPSAltitude,GPSDirection,GPSSpeed,GPSStatus)\n  #GPS %>% tbl_df()\n\n  return(list(base=.d[3],Graph=.d.Graph.td,GPS=GPS,Lap=.d.lap))\n}\n",
    "created" : 1502428330119.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "470639032",
    "id" : "91D93933",
    "lastKnownWriteTime" : 1502429872,
    "last_content_update" : 1502429872539,
    "path" : "~/Dropbox/RStudio/NeoRun/NeoRun/R/NeoRun.R",
    "project_path" : "R/NeoRun.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}